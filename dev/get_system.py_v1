__author__  = "Cedric Chauve, Michael Wallner"
__date__    = "April 10, 2019"

import sys
import numpy as np
import sympy as sp
#from sympy import *
#from sympy.matrices import Matrix
from tree import *

# ---------------------------------------------------------------------------
# Given a tree t, creates a system of equation whose solution gives
# the exponential growth factor of the counting sequence for the number
# of histories conditional to t
#
# naive algorithm: create 1 equation per node
# i.e. does not care about unique subtrees
#
# Input: 
# t .............. root of species tree: Node class
# MODEL .......... evolutionary model
# Assumption: if not MODEL['L'] then not MODEL['SL']
# Output: 
# mySys .......... String with system of equations
# M .............. Symbolic matrix of the system
def getSystem(t,MODEL={'D':True,'L':True,'T':False,'SL':False}):
    if not MODEL['L'] and MODEL['SL']:
        print('ERROR: SL allowed while L not allowed')

    # Tree t nodes
    allNodes = t.allNodes()
    K        = len(allNodes)

    # create symbolic variables needed for the determinant
    symVarStr  = ','.join(['b'+str(i) for i in range(K)])   
    symVarList = sp.symbols(symVarStr)
    
    M     = np.zeros((K,K)) 
    mySys = []    
    for u in allNodes:
        i  = u.getID()
	bi = 'b'+i
        eq = ''
        
        # Duplication
        if MODEL['D']:
	    eq += '-'+bi+'+'+bi+'^2'
            M[i][i] = 2*symVarList[i]-1

        if u.isLeaf():
            eq = eq+'z'
        elif u.isUnary():
            c  = u.getChild().getID()
            bc = 'b'+c
            eq += bc # Unary speciation
            M[i][c] = symVarList[c]+1
        else:
            l,r = u.getLeft(),u.getRight()
            bl  = 'b'+l
            br  = 'b'+r
            if not MODEL['SL']:
                eq += bl+'*'+br+'+'+bl+'+'+br # Speciation
            if MODEL['L']:
                eq += bl+'+'+br # SpeciationLoss
            M[i][l] = symVarList[l]+1
            M[i][r] = symVarList[r]+1

        # HGT
        if MODEL['T']:
            if u.getTime() >= 0:
                receivers = u.getContemporary()
            else:
                receivers = u.getIncomparable()
            for v in receivers:
               j  = v.getID()
               bj = 'b'+j
               eq = eq+'+'+bi+'*'+bj
               M[i][i] += symVarList[j]
               M[i][j]  = symVarList[i]

        mySys.append(eq)

    return((mySys,M))

    #detM = M.det()
    #mySys.append(""+detM)

if __name__ == "__main__":
    k = int(sys.argv[1])
    t = randomBinaryTree(k)
    labelTree(t)
    s = t.asNewick()
    print(s)
    (sysEq,matrixEq) = getSystem(t)
    print(sysEq)
    
